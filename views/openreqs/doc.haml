%html
  %head
    %title= @doc.name
    %script{:type => "text/javascript", :src => to("/jquery.js")}
    :javascript
      jQuery.fn.extend({
      insertAtCaret: function(myValue){
        return this.each(function(i) {
          if (document.selection) {
            //For browsers like Internet Explorer
            this.focus();
            sel = document.selection.createRange();
            sel.text = myValue;
            this.focus();
          }
          else if (this.selectionStart || this.selectionStart == '0') {
            //For browsers like Firefox and Webkit based
            var startPos = this.selectionStart;
            var endPos = this.selectionEnd;
            var scrollTop = this.scrollTop;
            this.value = this.value.substring(0, startPos)+myValue+this.value.substring(endPos,this.value.length);
            this.focus();
            this.selectionStart = startPos + myValue.length;
            this.selectionEnd = startPos + myValue.length;
            this.scrollTop = scrollTop;
          } else {
            this.value += myValue;
            this.focus();
          }
        })
      }
      });
      //$('#element1, #element2, #element3, .class-of-elements').insertAtCaret('text');


      $(function () {
        $("#edit").click(function(e) {
          e.preventDefault();
          $(".show-edit").toggle('fast');
        });

        $(".title .show-edit a, .doc > .edit .reset").click(function(e) {
          e.preventDefault();
          $(".edit, .content", $(this).parents(".doc")).toggle('fast');
        });

        $(".req .id a, .req .edit .reset").click(function(e) {
            e.preventDefault();
            $(".edit, .content", $(this).parents(".req")).toggle('fast');
        });

        add_attribute = function(e) {
          var li = $(this).parents("li");
          var new_attribute = $(".new_attribute", li);
          new_attribute.attr("name", $(this).val());
          new_attribute.removeClass("new_attribute");
          
          $(this).replaceWith($(this).val());
          
          li.after("<li><input class='new_attribute_name' /> : <textarea class='new_attribute' /></li>");
          $(".new_attribute_name", li.next()).change(add_attribute);
        }

        $(".req .edit form .new_attribute_name").change(add_attribute);

        $(".req .edit form").submit(function(e) {
          e.preventDefault();
          var req = $(this).parents(".req");
          var action = $(this).attr("action");
          $(".edit .save", req).attr("disabled", "disabled");

          $.post(action, $(this).serialize(), function(data) {
            $(".content", req).replaceWith($(data).find(".content"));
            $(".edit", req).hide('fast');
            $(".edit .save", req).removeAttr("disabled");
          });
        });

        $(".doc > .edit form").submit(function(e) {
          e.preventDefault();
          var doc = $(this).parents(".doc");
          var action = $(this).attr("action");
          $(".edit #save", doc).attr("disabled", "disabled");

          $.post(action, $(this).serialize(), function(data) {
            $(".content", doc).replaceWith($(data).find(".content"));
            $(".edit", doc).hide('fast');
            $(".edit .save", doc).removeAttr("disabled");
          });
        });

        $(".doc .edit form .add_req").click(function(e) {
          e.preventDefault();
          var textarea = $(this).siblings("textarea");
          
          $.get("#{to("/#{@doc.name}/requirements/next_name")}", function(data) {
            textarea.insertAtCaret("{{" + data + "}}\n");
          });
        });

      });

    :css
      img {max-width: 80%;}
      .req ul li p {display: inline;}
      .req .id {font-weight: bold;}
      .req .edit, .req .origin, .doc .edit {display: none;}
      .show-edit {display: none;}
  %body
    %div
      %a#summary{:href => to("/")} Return to Summary
      |
      %a#edit{:href => to("/#{@doc.name}/edit")} Edit the document
      |
      %a#history{:href => to("/#{@doc.name}/history")} History
      |
      %a#download-or{:href => to("/#{@doc.name}.or.gz")} Download
      |
      %a#download-or{:href => to("/#{@doc.name}/matrix")} Matrix view
    .doc
      %h1.title
        = @doc.name
        %span.show-edit
          (
          %a{:href => to("/#{@doc.name}/edit")} edit
          )

      .content
        = @doc.to_html

      .edit
        %form{:method => "post", :action => to("/#{@doc.name}/edit")}
          %textarea(name="_content" cols=80 rows=40)= @doc.content
          %p
          %input.add_req(type="button" value="Insert a new requirement")
          %p
          %input.save(type="submit" value="Save")
          %input.reset(type="reset" value="Cancel")

      %h2 Traceability matrix
      %ul
        %li
          %a{:href => to("/#{@doc.name}/requirements.satisfies")} satisfies

